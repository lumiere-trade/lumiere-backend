#!/usr/bin/env bash
################################################################################
# Laborant Pre-commit Hook
#
# 1. Runs tests for changed components (auto-detect via git)
# 2. Runs lint for entire changed components (even if tests fail)
# 3. Blocks commit only if tests OR lint fail
#
# Installed by: laborant install-hook
################################################################################

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Track overall success
TESTS_PASSED=true
LINT_PASSED=true

# Step 1: Run tests (auto-detect changed components)
echo ""
echo -e "${WHITE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${WHITE}Step 1/2: Running tests for changed components${NC}"
echo -e "${WHITE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

if python3 -m laborant test; then
    echo ""
    echo -e "${GREEN}[OK] Tests passed${NC}"
else
    echo ""
    echo -e "${RED}[FAIL] Tests failed${NC}"
    TESTS_PASSED=false
fi

echo ""

# Step 2: Detect changed components and run lint
echo -e "${WHITE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${WHITE}Step 2/2: Linting changed components${NC}"
echo -e "${WHITE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Get changed Python files and extract unique component names
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -z "$CHANGED_FILES" ]; then
    echo -e "${YELLOW}[INFO] No Python files changed - skipping lint${NC}"
    echo ""
else
    # Extract component names (first directory level)
    COMPONENTS=$(echo "$CHANGED_FILES" | cut -d'/' -f1 | sort -u | tr '\n' ' ')
    
    # Run lint on all changed components
    if python3 -m laborant lint $COMPONENTS; then
        echo ""
        echo -e "${GREEN}[OK] Lint passed${NC}"
    else
        echo ""
        echo -e "${RED}[FAIL] Lint failed${NC}"
        LINT_PASSED=false
    fi
fi

echo ""
echo -e "${WHITE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Final decision
if [ "$TESTS_PASSED" = true ] && [ "$LINT_PASSED" = true ]; then
    echo ""
    echo -e "${GREEN}[OK] All checks passed - Commit allowed${NC}"
    echo ""
    exit 0
else
    echo ""
    echo -e "${RED}[FAIL] Some checks failed - Commit blocked${NC}"
    echo ""
    
    if [ "$TESTS_PASSED" = false ]; then
        echo -e "${RED}  • Tests failed${NC}"
    fi
    
    if [ "$LINT_PASSED" = false ]; then
        echo -e "${RED}  • Lint failed${NC}"
    fi
    
    echo ""
    echo "Fix the issues and try again."
    echo "To skip this hook temporarily: git commit --no-verify"
    echo ""
    exit 1
fi
